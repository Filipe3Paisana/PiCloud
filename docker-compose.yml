services:

  db:
    build: 
      context: ./DB  
      dockerfile: Dockerfile
    container_name: postgres-1-container
    command: postgres -c config_file=/config/postgresql.conf
    
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: "/data"  
    ports:
      - "${DB_PORT}:5432"  
    volumes:
      - ./DB/postgres-1/pgdata:/data
      - ./DB/postgres-1/config:/config/
      - ./DB/postgres-1/archive:/mnt/server/archive
      # - ./DB/postgres-1/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      # - ./DB/postgres-1/config/pg_ident.conf:/etc/postgresql/pg_ident.conf
      # - ./DB/postgres-1/config/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - pi_network  

  db_standby:
    build: 
      context: ./DB  
      dockerfile: Dockerfile-replica
    container_name: postgres-2-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data  
    ports:
      - "5001:5432"  
    volumes:
      - ./DB/postgres-2/pgdata:/data  
      - ./DB/postgres-2/config:/config/
      - ./DB/postgres-2/archive:/mnt/server/archive  
      # - ./DB/postgres-2/config/pg_hba.conf:/etc/postgresql/pg_hba.conf  
      # - ./DB/postgres-2/config/pg_ident.conf:/etc/postgresql/pg_ident.conf  
      # - ./DB/postgres-2/config/postgresql.conf:/etc/postgresql/postgresql.conf  
    networks:
      - pi_network



  # Serviço da API
  api:
    build:
      context: ./API
      dockerfile: Dockerfile
    container_name: api-container
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PORT=8080
    ports:
      - "${APP_PORT}:8080"
    depends_on:
      - db
    tty: true
    networks:
      - pi_network

  # Node de Armazenamento
  node1:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node1-container
    environment:
      - NODE_ID=node1
      - NODE_PORT=8082
    ports:
      - "8082:8082"
    networks:
      - pi_network  # Conectado à mesma rede que a API para comunicação
  
  node2:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node2-container
    environment:
      - NODE_ID=node2
      - NODE_PORT=8082
    ports:
      - "8083:8082"
    networks:
      - pi_network

  node3:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node3-container
    environment:
      - NODE_ID=node3
      - NODE_PORT=8082
    ports:
      - "8084:8082"
    networks:
      - pi_network

  node4:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node4-container
    environment:
      - NODE_ID=node4
      - NODE_PORT=8082
    ports:
      - "8085:8082"
    networks:
      - pi_network
  
  node5:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node5-container
    environment:
      - NODE_ID=node5
      - NODE_PORT=8082
    ports:
      - "8086:8082"
    networks:
      - pi_network


  # Serviços web com NGINX
  web1:
    image: nginx:latest
    container_name: web1
    volumes:
      - ./WEB/html:/usr/share/nginx/html
    networks:
      - pi_network

  web2:
    image: nginx:latest
    container_name: web2
    volumes:
      - ./WEB/html:/usr/share/nginx/html
    networks:
      - pi_network

  # NGINX reverso para balancear carga entre web1 e web2
  nginx:
    build: 
      context: ./WEB
      dockerfile: Dockerfile
    image: nginx:${NGINX_IMAGE_VERSION}
    container_name: nginx-container
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web1
      - web2
    networks:
      - pi_network

  
  # k6:
  #   build:
  #     context: ./k6-tester 
  #     dockerfile: Dockerfile  
  #   depends_on:
  #     - nginx  
  #   networks:
  #     - pi_network

volumes:
  db_data:
  
networks:
  pi_network:
