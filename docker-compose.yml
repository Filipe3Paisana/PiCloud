version: '3.8'

x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  restart: always
  healthcheck:
    test: 'pg_isready -U test --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - pi_network
  
  data_collector:
    build:
      context: ./data_collector
      dockerfile: Dockerfile
    container_name: data_collector
    volumes:
      - ./data_collector/prometheus_data:/app/prometheus_data
    depends_on:
      - prometheus
    networks:
      - pi_network
    environment:
      - PROMETHEUS_URL=http://prometheus:9090

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    networks:
      - pi_network
  
  db:
    <<: *postgres-common
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: test
      POSTGRES_DB: test
      POSTGRES_PASSWORD: test
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    user: postgres
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./DB/scripts/init:/docker-entrypoint-initdb.d
    networks:
      - pi_network

  db-replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGUSER: reptest
      PGPASSWORD: test
    user: postgres
    command: |
      bash -c "
      rm -rf /var/lib/postgresql/data/*
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=db --port=5432
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres 
      "
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pi_network

  api:
    build:
      context: ./API
      dockerfile: Dockerfile
    container_name: api-container
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PORT=8080
    ports:
      - "${APP_PORT}:8080"
    depends_on:
      - db
    tty: true
    networks:
      - pi_network

  node1:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node1-container
    environment:
      - NODE_ID=node1
      - NODE_PORT=8082
    ports:
      - "8082:8082"
    networks:
      - pi_network
  node-exporter1:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network

  node2:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node2-container
    environment:
      - NODE_ID=node2
      - NODE_PORT=8082
    ports:
      - "8083:8082"
    networks:
      - pi_network
  node-exporter2:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network

  node3:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node3-container
    environment:
      - NODE_ID=node3
      - NODE_PORT=8082
    ports:
      - "8084:8082"
    networks:
      - pi_network
  node-exporter3:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network

  node4:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node4-container
    environment:
      - NODE_ID=node4
      - NODE_PORT=8082
    ports:
      - "8085:8082"
    networks:
      - pi_network
  node-exporter4:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network
  
  node5:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node5-container
    environment:
      - NODE_ID=node5
      - NODE_PORT=8082
    ports:
      - "8086:8082"
    networks:
      - pi_network
  node-exporter5:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network

  web1:
    image: nginx:latest
    container_name: web1
    volumes:
      - ./WEB/html:/usr/share/nginx/html
    networks:
      - pi_network

  web2:
    image: nginx:latest
    container_name: web2
    volumes:
      - ./WEB/html:/usr/share/nginx/html
    networks:
      - pi_network

  nginx:
    build: 
      context: ./WEB
      dockerfile: Dockerfile
    image: nginx:${NGINX_IMAGE_VERSION}
    container_name: nginx-container
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web1
      - web2
    networks:
      - pi_network
  
volumes:
  db_data:
  db_replica_data:
  
networks:
  pi_network:
    driver: bridge
