services:

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - pi_network
  
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Pode mudar a senha
    # volumes:
    # - ./grafana:/var/lib/grafana
    # - ./grafana/dashboards:/grafana/dashboards
    # - ./grafana/grafana_setup.sh:/etc/grafana/grafana_setup.sh
    # entrypoint: ["/bin/bash", "-c", "/etc/grafana/grafana_setup.sh"]
    networks:
      - pi_network

  node_exporter:
      image: prom/node-exporter
      container_name: node_exporter
      ports:
        - "9100:9100"
      networks:
        - pi_network

  db:
    image: postgres:${POSTGRES_IMAGE_VERSION}
    container_name: postgres-container
    command: "postgres -c config_file=/config/postgresql.conf"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: "/data"
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./DB/master/pgdata:/data
      - ./DB/master/config:/config
      - ./DB/master/archive:/mt/server/archive
      - ./DB/scripts/init:/docker-entrypoint-initdb.d
    networks:
      - pi_network

  
  db-replica:
    image: postgres:${POSTGRES_IMAGE_VERSION}
    container_name: postgres-replica-container
    command: "postgres -c config_file=/config/postgresql.conf"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: "/data"
    ports:
      - 5001:5432 
    networks:
      - pi_network
    depends_on:
      - db
    volumes:
      - ./DB/replica/pgdata:/data
      - ./DB/replica/config:/config
      - ./DB/replica/archive:/mt/server/archive


    # entrypoint:
    #   - "bash"
    #   - "-c"
    #   - |
    #     if [ ! -f /var/lib/postgresql/data/standby.signal ]; then
    #       pg_basebackup -h postgres-1 -p 5432 -U replicauser -D /var/lib/postgresql/data -Fp -Xs -R -P
    #     fi
    #     docker-entrypoint.sh postgres


  # Serviço da API
  api:
    build:
      context: ./API
      dockerfile: Dockerfile
    container_name: api-container
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PORT=8080
    ports:
      - "${APP_PORT}:8080"
    depends_on:
      - db
    tty: true
    networks:
      - pi_network


  # Node de Armazenamento
  node1:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node1-container
    environment:
      - NODE_ID=node1
      - NODE_PORT=8082
    ports:
      - "8082:8082"
    networks:
      - pi_network  # Conectado à mesma rede que a API para comunicação
  node-exporter1:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network

  node2:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node2-container
    environment:
      - NODE_ID=node2
      - NODE_PORT=8082
    ports:
      - "8083:8082"
    networks:
      - pi_network
  node-exporter2:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network

  node3:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node3-container
    environment:
      - NODE_ID=node3
      - NODE_PORT=8082
    ports:
      - "8084:8082"
    networks:
      - pi_network
  node-exporter3:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network

  node4:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node4-container
    environment:
      - NODE_ID=node4
      - NODE_PORT=8082
    ports:
      - "8085:8082"
    networks:
      - pi_network
  node-exporter4:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network
  
  node5:
    build:
      context: ./NODE
      dockerfile: Dockerfile
    container_name: node5-container
    environment:
      - NODE_ID=node5
      - NODE_PORT=8082
    ports:
      - "8086:8082"
    networks:
      - pi_network
  node-exporter5:
    image: prom/node-exporter
    ports:
      - "9100"
    networks:
      - pi_network


  # Serviços web com NGINX
  web1:
    image: nginx:latest
    container_name: web1
    volumes:
      - ./WEB/html:/usr/share/nginx/html
    networks:
      - pi_network

  web2:
    image: nginx:latest
    container_name: web2
    volumes:
      - ./WEB/html:/usr/share/nginx/html
    networks:
      - pi_network

  # NGINX reverso para balancear carga entre web1 e web2
  nginx:
    build: 
      context: ./WEB
      dockerfile: Dockerfile
    image: nginx:${NGINX_IMAGE_VERSION}
    container_name: nginx-container
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web1
      - web2
    networks:
      - pi_network
  
  # k6:
  #   build:
  #     context: ./k6-tester 
  #     dockerfile: Dockerfile  
  #   depends_on:
  #     - nginx  
  #   networks:
  #     - pi_network

volumes:
  db_data:
  db_replica_data:
  
networks:
  pi_network:
    driver: bridge
